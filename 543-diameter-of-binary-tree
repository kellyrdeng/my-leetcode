# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def diameterOfBinaryTree(self, root: Optional[TreeNode]) -> int:
        #diameter = max path on left + max path on right
        return self.recurHelper(0, root)
        
    def recurHelper(self, maxDia: int, root: Optional[TreeNode]) -> int:
        if root == None:
            return maxDia
        if self.getDiameter(root) > maxDia:
            return max(self.recurHelper(self.getDiameter(root), root.left), self.recurHelper(self.getDiameter(root), root.right))
        return max(self.recurHelper(maxDia, root.left), self.recurHelper(maxDia, root.right))

    def getDiameter(self, root: Optional[TreeNode]) -> int:
        diameter = self.getDepth(root.left) + self.getDepth(root.right)
        return diameter

    def getDepth(self, root: Optional[TreeNode]) -> int:
        if root == None:
            return 0
        return 1 + max(self.getDepth(root.left), self.getDepth(root.right)) 
