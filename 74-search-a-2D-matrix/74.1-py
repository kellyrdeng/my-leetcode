class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        #binary search the m rows to find a row i where target > i but target < i + 1
        #binary search the row i for an n == target
        print(self.findRow(matrix, target))
        if self.findRow(matrix, target) == -1:
            return False
        row = matrix[self.findRow(matrix, target)]

        start = 0
        end = len(row) - 1

        while start <= end:
            middle = start + ((end - start) // 2)
            if target == row[middle]:
                return True
            elif target < row[middle]:
                end = middle - 1
            else:
                start = middle + 1
        return False

    def findRow(self, matrix: List[List[int]], target: int) -> int:
        start = 0
        end = len(matrix) - 1

        while start <= end:
            middle = start + ((end - start) // 2)
            if target == matrix[middle][0]:
                return middle
            elif target < matrix[0][0]:
                return -1
            elif (target > matrix[middle][0] and middle == len(matrix) - 1) or (target > matrix[middle][0] and target < matrix[middle + 1][0]): #found row
                return middle
            elif target < matrix[middle][0] and target < matrix[middle + 1][0]:
                end = middle - 1
            else:
                start = middle + 1
        return -1
Console
